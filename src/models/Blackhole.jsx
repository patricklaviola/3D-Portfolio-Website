/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: rubykamen (https://sketchfab.com/rubykamen)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/blackhole-74cbeaeae2174a218fe9455d77902b5c
Title: Blackhole
*/

import { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

import blackHoleScene from "../assets/3d/blackhole.glb";

const BlackHole = ({
    isRotatingRight,
    isRotatingLeft,
    setIsRotatingRight,
    setIsRotatingLeft,
    setCurrentStage,
    currentFocusPoint,
    sunDragging,
    ...props
}) => {

  const blackHoleRef = useRef();
  const { gl } = useThree();
  const { nodes, materials, animations } = useGLTF(blackHoleScene);
  const { actions } = useAnimations(animations, blackHoleRef);
  const rotationSpeed = useRef(0);
  const initialTouchYRef = useRef(0);

  const dampingFactor = 0.95;

  // Handle keydown events
  const handleKeyDown = (event) => {
    const action = actions['Take 001'];

    if (event.key === "ArrowRight" || event.key === "ArrowDown") {
      if (!isRotatingRight) setIsRotatingRight(true);

      blackHoleRef.current.rotation.y += 0.009 * Math.PI;
      rotationSpeed.current = 0.09;

      if (action) {
        action.timeScale = 2;
        action.play();
      }
    } else if (event.key === "ArrowLeft" || event.key === "ArrowUp") {
      if (!isRotatingLeft) setIsRotatingLeft(true);

      blackHoleRef.current.rotation.y -= 0.009 * Math.PI;
      rotationSpeed.current = -0.09;

      if (action) {
        action.timeScale = -2;
        action.play();
      }
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    const action = actions['Take 001'];

    if (event.key === "ArrowLeft" || event.key === "ArrowRight" || event.key === "ArrowUp" || event.key === "ArrowDown") {
      setIsRotatingRight(false);
      setIsRotatingLeft(false);
      if (action) {
        action.timeScale = 0.5;
      }
    }
  };

  // Ref to store the timeout ID
  const rotationEndTimeoutRef = useRef();

  // Handle scroll event
  const handleScroll = (event) => {
    event.stopPropagation();

    // Determine the scroll delta
    const scrollDelta = event.deltaY;

    // Update rotation direction states immediately
    setIsRotatingRight(scrollDelta > 0);
    setIsRotatingLeft(scrollDelta < 0);

    // Adjust the factor based on the desired sensitivity
    const rotationChange = scrollDelta * 0.0001 * Math.PI;

    // Update the black hole's rotation
    blackHoleRef.current.rotation.y += rotationChange;

    // Update the rotation speed
    rotationSpeed.current = rotationChange;

    // Determine the direction for the animation based on scroll direction
    const action = actions['Take 001'];
    if (action) {
      action.timeScale = scrollDelta > 0 ? 2 : -2;
      action.play();
    }

    // Clear any existing timeout
    clearTimeout(rotationEndTimeoutRef.current);

    // Set a new timeout
    rotationEndTimeoutRef.current = setTimeout(() => {
      setIsRotatingRight(false);
      setIsRotatingLeft(false);
      if (action) {
        action.timeScale = 0.5;
      }
    }, 100); // Adjust the timeout duration as needed
  };
  
  // Handle touch start event
  const handleTouchStart = (event) => {
    if (event.touches.length === 1) {
      // Store the initial touch position
      initialTouchYRef.current = event.touches[0].clientY;
    }
  };
  
  // Handle touch move event
  const handleTouchMove = (event) => {
    if (event.touches.length === 1) {
      event.preventDefault();
      event.stopPropagation();
      
      const currentTouchY = event.touches[0].clientY;
      // Calculate the touch movement delta
      const deltaY = initialTouchYRef.current - currentTouchY;
      // Update the initial touch position for the next movement
      initialTouchYRef.current = currentTouchY;
    
      // Determine the scroll delta
      const scrollDelta = deltaY;
    
      // Update rotation direction states immediately
      setIsRotatingRight(scrollDelta > 0);
      setIsRotatingLeft(scrollDelta < 0);
    
      // Adjust the factor based on the desired sensitivity
      const rotationChange = scrollDelta * 0.001 * Math.PI;
    
      // Update the black hole's rotation
      blackHoleRef.current.rotation.y += rotationChange;
    
      // Update the rotation speed
      rotationSpeed.current = rotationChange;
    
      // Determine the direction for the animation based on scroll direction
      const action = actions['Take 001'];
      if (action) {
        action.timeScale = scrollDelta > 0 ? 2 : -2;
        action.play();
      }
    
      // Clear any existing timeout
      clearTimeout(rotationEndTimeoutRef.current);
    
      // Set a new timeout
      rotationEndTimeoutRef.current = setTimeout(() => {
        setIsRotatingRight(false);
        setIsRotatingLeft(false);
        if (action) {
          action.timeScale = 0.5;
        }
      }, 100); // Adjust the timeout duration as needed
    }
  };
  
  

  useEffect(() => {
    const action = actions['Take 001'];

    if (action) {
      action.timeScale = 0.5;
      action.play();
    }
  }, [actions])
  
  
  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const blackHole = blackHoleRef.current;
    if (blackHole) {
      window.addEventListener("keydown", handleKeyDown);
      window.addEventListener("keyup", handleKeyUp);
      window.addEventListener("wheel", handleScroll);
      window.addEventListener("touchstart", handleTouchStart, { passive: true });
      window.addEventListener("touchmove", handleTouchMove, { passive: false });
    }

    // Remove event listeners when component unmounts
    return () => {
      if (blackHole) {
        window.removeEventListener("keydown", handleKeyDown);
        window.removeEventListener("keyup", handleKeyUp);
        window.removeEventListener("wheel", handleScroll);
        window.removeEventListener("touchstart", handleTouchStart);
        window.removeEventListener("touchmove", handleTouchMove);
      }
    };
  }, [gl, handleScroll]);

  // This function is called on each frame update
  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotatingRight && !isRotatingLeft) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      blackHoleRef.current.rotation.y += rotationSpeed.current;
    } else {
      // When rotating, determine the current stage based on black hole's orientation
      const rotation = blackHoleRef.current.rotation.y;

      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the black hole's orientation
      const degreeToRadian = degree => degree * Math.PI / 180;
      const stageRange = degreeToRadian(70);
      const gapRange = degreeToRadian(20);

      const stage1Start = 0;
      const stage2Start = stage1Start + stageRange + gapRange;
      const stage3Start = stage2Start + stageRange + gapRange;
      const stage4Start = stage3Start + stageRange + gapRange;
      
      // Update the switch statement
      switch (true) {
        case normalizedRotation >= stage1Start && normalizedRotation < stage1Start + stageRange:
          setCurrentStage(1);
          break;
        case normalizedRotation >= stage2Start && normalizedRotation < stage2Start + stageRange:
          setCurrentStage(2);
          break;
        case normalizedRotation >= stage3Start && normalizedRotation < stage3Start + stageRange:
          setCurrentStage(3);
          break;
        case normalizedRotation >= stage4Start && normalizedRotation < stage4Start + stageRange:
          setCurrentStage(4);
          break;
        default:
          setCurrentStage(null);
      }           
    }
  });
  
  return (
    <group 
      ref={blackHoleRef}
      {...props} 
      dispose={null}
      onScroll={handleScroll}
    >
      <group name="Sketchfab_Scene">
        <group
          name="Sketchfab_model"
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.016}
        >
          <group
            name="415c209837844e7b91255101a7c3eb67fbx"
            rotation={[Math.PI / 2, 0, 0]}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="Blackhole_core"
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={0.968}
                >
                  <mesh
                    name="Blackhole_core_Blackhole_core_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Blackhole_core_Blackhole_core_0.geometry}
                    material={materials.Blackhole_core}
                  />
                </group>
                <group name="Blackhole_ring" rotation={[-Math.PI / 2, 0, 0]}>
                  <mesh
                    name="Blackhole_ring_Blackhole_ring_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Blackhole_ring_Blackhole_ring_0.geometry}
                    material={materials.Blackhole_ring}
                  />
                </group>
                <group
                  name="Blackhole_skin_001"
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={0.959}
                >
                  <mesh
                    name="Blackhole_skin_001_Blackhole_skin_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_001_Blackhole_skin_0.geometry
                    }
                    material={materials.Blackhole_skin}
                  />
                </group>
                <group
                  name="Blackhole_skin_002"
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={0.957}
                >
                  <mesh
                    name="Blackhole_skin_002_Blackhole_core_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_002_Blackhole_core_0.geometry
                    }
                    material={materials.Blackhole_core}
                  />
                </group>
                <group
                  name="Blackhole_skin_003"
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={0.91}
                >
                  <mesh
                    name="Blackhole_skin_003_Blackhole_skin_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_003_Blackhole_skin_0.geometry
                    }
                    material={materials.Blackhole_skin}
                  />
                </group>
                <group
                  name="Blackhole_skin_004"
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={0.908}
                >
                  <mesh
                    name="Blackhole_skin_004_Blackhole_core_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_004_Blackhole_core_0.geometry
                    }
                    material={materials.Blackhole_core}
                  />
                </group>
                <group
                  name="Blackhole_skin_005"
                  rotation={[-Math.PI / 2, 0, 0.96]}
                  scale={0.9}
                >
                  <mesh
                    name="Blackhole_skin_005_Blackhole_skin_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_005_Blackhole_skin_0.geometry
                    }
                    material={materials.Blackhole_skin}
                  />
                </group>
                <group
                  name="Blackhole_skin_006"
                  rotation={[-Math.PI / 2, 0, -2.007]}
                  scale={0.864}
                >
                  <mesh
                    name="Blackhole_skin_006_Blackhole_skin_inner_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_006_Blackhole_skin_inner_0.geometry
                    }
                    material={materials.Blackhole_skin_inner}
                  />
                </group>
                <group
                  name="Blackhole_skin_007"
                  rotation={[-Math.PI / 2, 0, -2.007]}
                  scale={0.866}
                >
                  <mesh
                    name="Blackhole_skin_007_Blackhole_core_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_007_Blackhole_core_0.geometry
                    }
                    material={materials.Blackhole_core}
                  />
                </group>
                <group name="Blackhole_core001" rotation={[-Math.PI / 2, 0, 0]}>
                  <mesh
                    name="Blackhole_core001_Blackhole_core_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Blackhole_core001_Blackhole_core_0.geometry}
                    material={materials.Blackhole_core}
                  />
                </group>
                <group
                  name="Blackhole_skin_008"
                  rotation={[-Math.PI / 2, 0, 0.087]}
                  scale={0.845}
                >
                  <mesh
                    name="Blackhole_skin_008_Blackhole_skin_inner_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_008_Blackhole_skin_inner_0.geometry
                    }
                    material={materials.Blackhole_skin_inner}
                  />
                </group>
                <group
                  name="Blackhole_skin_009"
                  rotation={[-Math.PI / 2, 0, -0.611]}
                  scale={0.887}
                >
                  <mesh
                    name="Blackhole_skin_009_Blackhole_skin_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_009_Blackhole_skin_0.geometry
                    }
                    material={materials.Blackhole_skin}
                  />
                </group>
                <group
                  name="Blackhole_skin_010"
                  rotation={[-Math.PI / 2, 0, -2.531]}
                  scale={0.929}
                >
                  <mesh
                    name="Blackhole_skin_010_Blackhole_skin_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_010_Blackhole_skin_0.geometry
                    }
                    material={materials.Blackhole_skin}
                  />
                </group>
                <group
                  name="Blackhole_skin_011"
                  rotation={[-Math.PI / 2, 0, -2.531]}
                  scale={0.928}
                >
                  <mesh
                    name="Blackhole_skin_011_Blackhole_core_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_011_Blackhole_core_0.geometry
                    }
                    material={materials.Blackhole_core}
                  />
                </group>
                <group
                  name="Blackhole_skin_012"
                  rotation={[-Math.PI / 2, 0, 2.094]}
                  scale={0.856}
                >
                  <mesh
                    name="Blackhole_skin_012_Blackhole_skin_inner_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_012_Blackhole_skin_inner_0.geometry
                    }
                    material={materials.Blackhole_skin_inner}
                  />
                </group>
                <group
                  name="Blackhole_skin_013"
                  rotation={[-Math.PI / 2, 0, -2.967]}
                  scale={0.835}
                >
                  <mesh
                    name="Blackhole_skin_013_Blackhole_ring2_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_skin_013_Blackhole_ring2_0.geometry
                    }
                    material={materials.Blackhole_ring2}
                  />
                </group>
                <group
                  name="Blackhole_core002"
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={0.928}
                >
                  <mesh
                    name="Blackhole_core002_Blackhole_ring2_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Blackhole_core002_Blackhole_ring2_0.geometry
                    }
                    material={materials.Blackhole_ring2}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

export default BlackHole;



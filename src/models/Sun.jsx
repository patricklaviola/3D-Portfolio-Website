/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: 991519166 (https://sketchfab.com/991519166)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/galaxy-dbb2f075329747a09cc8add2ad05acad
Title: Sun
*/

import { useRef, useEffect, useState } from "react";
import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { useDrag } from "react-use-gesture";
import sunScene from "../assets/3d/sun.glb";
import { RESOLUTIONS } from "../constants/resolutions";
import { getCurrentResolution } from "../constants/resolutions";

const Sun = ({ setCurrentStage, setSunDragging, sunDragging, ...props }) => {
  const sunRef = useRef();
  const { scene, animations } = useGLTF(sunScene);
  const { actions } = useAnimations(animations, sunRef);
  const [velocity, setVelocity] = useState({ x: 0, y: 0 });
  const [hasBeenDragged, setHasBeenDragged] = useState(false);
  const { size } = useThree();
  const [bounds, setBounds] = useState({ x: 5, y: 5, z: 5 });
  const currentResolution = getCurrentResolution();

  useEffect(() => {
    actions["Take 001"].play();
  }, []);

  useEffect(() => {
    const updatedSunMovementbounds = {
      x: size.width / currentResolution.ratio,
      y: size.height / currentResolution.ratio,
    };
    setBounds(updatedSunMovementbounds);
  }, [window]);

  const sunDragHandlers = useDrag(
    ({ xy: [x, y], down, movement: [mx, my], event }) => {
      const isTouch = event.touches && event.touches.length > 0;
      const scaleFactor = isTouch ? 400 : 800;
      const xPosition = (x - size.width / 2) / 60;
      const yPosition = (size.height / 2 - y) / 60;

      if (down) {
        sunRef.current.position.x = xPosition;
        sunRef.current.position.y = yPosition;
        setCurrentStage(null);

        if (!sunDragging) {
          setSunDragging(true);
        }
        if (!hasBeenDragged) {
          setHasBeenDragged(true);
        }
      } else {
        setVelocity({
          x: mx / scaleFactor,
          y: -my / scaleFactor,
        });
        setSunDragging(false);
      }
    },
    { pointerEvents: true }
  );

  useFrame(({ clock }) => {
    if (!hasBeenDragged) {
      const a = 10;
      const b = -2;
      const c = 11;
      const speed = 0.5;

      sunRef.current.position.x = a * Math.cos(speed * clock.elapsedTime);
      sunRef.current.position.y = b * Math.sin(speed * clock.elapsedTime) - 1;
      sunRef.current.position.z = c * Math.sin(speed * clock.elapsedTime) - 18;
    } else if (sunRef.current.position.z < -9) {
      sunRef.current.position.z = -6;
    }

    sunRef.current.position.x += velocity.x;
    sunRef.current.position.y += velocity.y;

    const dampingFactor = 0.98;

    setVelocity((v) => ({
      x: v.x * dampingFactor,
      y: v.y * dampingFactor,
    }));

    if (hasBeenDragged) {
      if (sunRef.current.position.x > bounds.x) {
        sunRef.current.position.x = bounds.x;
        setVelocity((v) => ({ ...v, x: -Math.abs(v.x) }));
      } else if (sunRef.current.position.x < -bounds.x) {
        sunRef.current.position.x = -bounds.x;
        setVelocity((v) => ({ ...v, x: Math.abs(v.x) }));
      }

      if (sunRef.current.position.y > bounds.y) {
        sunRef.current.position.y = bounds.y;
        setVelocity((v) => ({ ...v, y: -Math.abs(v.y) }));
      } else if (sunRef.current.position.y < -bounds.y) {
        sunRef.current.position.y = -bounds.y;
        setVelocity((v) => ({ ...v, y: Math.abs(v.y) }));
      }
    }
  });

  return (
    <mesh
      position={[2, -1.4, 0]}
      scale={[0.09, 0.09, 0.09]}
      ref={sunRef}
      {...sunDragHandlers()}
    >
      <primitive object={scene} />
    </mesh>
  );
};

export default Sun;
